volumes:
  acmesky_db_data:
    driver: local
  airline_db_data:
    driver: local

services:
    acmesky_db:
        image: postgres:latest
        restart: always
        env_file: ./src/ACMESky/ACMESkyDB/.env
        environment:
            POSTGRES_USER: pg
            POSTGRES_PASSWORD: pass 
            POSTGRES_HOST: acmesky_db 
            POSTGRES_DB: acmesky
        ports:
            - "5432:5432"
        volumes:
          - ./src/ACMESky/ACMESkyDB/init.sql:/docker-entrypoint-initdb.d/init.sql
          - acmesky_db_data:/var/lib/postgresql

    acmesky_frontend:
        build: ./src/ACMESky/ACMESkyWeb/frontend
        ports:
            - "8080:80"

    acmesky_backend:
        build: ./src/ACMESky/ACMESkyWeb/backend
        ports:
            - "3000:3000"
        env_file: ./src/ACMESky/ACMESkyWeb/backend/.env
        depends_on:
            - acmesky_db

    acmesky_sse:
        build: ./src/ACMESky/ACMESkySSE
        env_file: ./src/ACMESky/ACMESkySSE/.env
        ports:
            - "3030:3000"

    camunda:
        image: camunda/camunda-bpm-platform:latest
        container_name: camunda
        ports: 
            - 10000:8080
            - 9990:9990
        
    camunda_workers:
        build: ./src/ACMESky/camunda
        container_name: camunda_workers
        env_file: ./src/ACMESky/camunda/.env
        depends_on:
            - acmesky_db

    airline_service_1:
        build: ./src/airlineService
        env_file: ./src/airlineService/.env
        environment:
            POSTGRES_HOST: airline_db_1
            AIRLINE_NAME: American Airlines
            AIRLINE_PREFIX: AA
            FLIGHT_GENERATION_INTERVAL: 30m
        ports:
            - 8085:8085
        command: sh -c "sleep 5 && ./main"
        restart: always
        depends_on:
          - airline_db_1

    airline_db_1:
        image: postgres:latest
        restart: always
        env_file: ./src/airlineService/.env
        environment:
            POSTGRES_HOST: airline_db_1
            AIRLINE_NAME: American Airlines
            AIRLINE_PREFIX: AA
        ports:
          - "5433:5432"
        volumes:
          - ./src/airlineService/data/init_sql.sh:/docker-entrypoint-initdb.d/init_sql.sh
          - airline_db_data:/var/lib/postgresql

    airline_service_2:
        build: ./src/airlineService
        env_file: ./src/airlineService/.env
        environment:
            POSTGRES_HOST: airline_db_2
            AIRLINE_NAME: Emic Airlines
            AIRLINE_PREFIX: EA
            FLIGHT_GENERATION_INTERVAL: 60m
        ports:
            - 8086:8085
        command: sh -c "sleep 5 && ./main"
        restart: always
        depends_on:
          - airline_db_2

    airline_db_2:
        image: postgres:latest
        restart: always
        env_file: ./src/airlineService/.env
        environment:
            POSTGRES_HOST: airline_db_2
            AIRLINE_NAME: Emic Airlines
            AIRLINE_PREFIX: EA
        ports:
          - "5434:5432"
        volumes:
          - ./src/airlineService/data/init_sql.sh:/docker-entrypoint-initdb.d/init_sql.sh
          - airline_db_data:/var/lib/postgresql

    bank_frontend:
        build: ./src/bankService/frontend/
        ports:
            - "8087:8087"

    bank_backend:
        build: ./src/bankService/backend/
        ports:
            - "3001:3000"
        environment:
            NODE_ENV: production
            
    prontogram_frontend:
        build: ./src/prontogram/frontend
        ports:
            - "8089:8089"
        restart: always

    prontogram_backend:
        build: ./src/prontogram/backend
        ports:
            - "8050:8050"
        restart: always

    rent_service_1:
        build: ./src/rentService
        environment:
            - SERVICE_NAME=RentService1
        ports:
            - "8030:8030"
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        restart: always

    geodistance:
        container_name: geodistance_container
        build: ./src/geodistanceService
        env_file:
            - ./src/geodistanceService/.env
        ports:
            - "8040:8040"
        restart: always
