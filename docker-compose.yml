version: '3.9'

services:
    postgres_back:
        image: postgres:latest
        container_name: postgres_back
        restart: always
        environment:
            POSTGRES_USER: pg
            POSTGRES_PASSWORD: pass 
            POSTGRES_HOST: postgres_back 
            POSTGRES_DB: acmesky 
        ports:
            - "5432:5432"
        volumes:
          - ./src/ACMESky/ACMESkyDB/init.sql:/docker-entrypoint-initdb.d/init.sql

    acme-frontend:
        build: ./src/ACMESky/ACMESkyWeb/frontend
        ports:
            - "8080:80"

    acme-backend:
        build: ./src/ACMESky/ACMESkyWeb/backend
        ports:
            - "3000:3000"
        environment:
            NODE_ENV: production
        depends_on:
            - postgres_back


    national-airline:
        container_name: national-service
        build: ./src/airlineService
        env_file: ./src/airlineService/.env
        ports:
            - 8085:8085
        command: sh -c "sleep 5 && ./main"
        restart: always
        depends_on:
          - db_airline

    db_airline:
        image: postgres:latest
        container_name: postgres-airline
        restart: always
        env_file: ./src/airlineService/.env
        ports:
          - "5433:5432"
        volumes:
          - ./src/airlineService/data.sql:/docker-entrypoint-initdb.d/data.sql

    frontend_bank:
        build: ./src/bankService/frontend/
        ports:
            - "8087:8087"

    backend_bank:
        build: ./src/bankService/backend/
        ports:
            - "3001:3001"
        environment:
            NODE_ENV: production
            
#   Prontogram
    prontogram_frontend:
        container_name: prontogram_frontend_
        build: ./src/prontogram/frontend
        ports:
            - "8089:8089"
        restart: always
    # prontogram:
    #     container_name: prontogram_service_container
    #     build: ./src/Prontogram/back-end
    #     ports:
    #         - "8050:8000"
    #     restart: always
    #     networks: 
    #         - acmesky


#   Rent Service
    rent-service-1:
        container_name: rent_service_1
        build: ./src/rentService
        environment:
            - SERVICE_NAME=RentService1
        ports:
            - "8030:8030"
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        restart: always
        # networks: 
        #     - acmesky
    rent-service-2:
        container_name: rent_service_2
        build: ./src/rentService
        environment:
            - SERVICE_NAME=RentService2
        ports:
            - "8032:8032"
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        restart: always
        # networks: 
        #     - acmesky

#   Geo distance service
    geodistance:
        container_name: geodistance_container
        build: ./src/geodistanceService
        env_file:
            - ./src/geodistanceService/.env
        ports:
            - "8040:8040"
        restart: always
        # networks: 
        #     - acmesky
